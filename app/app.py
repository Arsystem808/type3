
import json
import sys, os
from dotenv import load_dotenv
load_dotenv()
# --- Import guard: ensure project root on sys.path even if launched from /app ---
ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if ROOT_DIR not in sys.path:
    sys.path.insert(0, ROOT_DIR)

import streamlit as st
from datetime import datetime
from capintel.signal_engine import build_signal
from capintel.providers.polygon_client import get_last_price, PolygonError
from capintel.backtest import toy_backtest

st.set_page_config(page_title="CapIntel ‚Äî Signals", page_icon="üìà", layout="wide")

st.title("üìà CapIntel ‚Äî –ò–¥–µ–∏ –¥–ª—è Crypto & Equities (MVP)")
st.caption("–§–æ—Ä–º–∞—Ç: BUY / SHORT / CLOSE / WAIT + —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞/—Ü–µ–ª–µ–π/—Å—Ç–æ–ø–∞, confidence –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏.")

with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    asset_class = st.selectbox("–ö–ª–∞—Å—Å –∞–∫—Ç–∏–≤–∞", ["crypto", "equity"], index=0)
    horizon = st.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç", ["intraday", "swing", "position"], index=1)
    ticker = st.text_input("–¢–∏–∫–µ—Ä", value="BTCUSDT" if asset_class=="crypto" else "AAPL")
    last_price = st.number_input("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", min_value=0.0001, value=65000.0 if asset_class=="crypto" else 230.0, step=0.1, format="%.4f")
    if st.button("–ü–æ–¥—Ç—è–Ω—É—Ç—å —Ü–µ–Ω—É –∏–∑ Polygon", use_container_width=True):
        try:
            fetched = get_last_price(asset_class, ticker)
            last_price = float(fetched)
            st.success(f"–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {last_price:.4f}")
        except PolygonError as e:
            st.error(str(e))
    st.write("---")
    st.markdown("**–°–æ–≤–µ—Ç:** —É–∫–∞–∂–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É; –ª–æ–≥–∏–∫–∞ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ —É—Ä–æ–≤–Ω–∏.")
    go = st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª", use_container_width=True)

if go:
    sig = build_signal(ticker, asset_class, horizon, last_price)

    col1, col2 = st.columns([1.1, 1])
    with col1:
        st.subheader(f"{sig.ticker} ¬∑ {sig.asset_class.upper()} ¬∑ {sig.horizon}")
        st.markdown(f"### ‚û§ –î–µ–π—Å—Ç–≤–∏–µ: **{sig.action}**")
        st.markdown(
            f"""
            **–í—Ö–æ–¥:** `{sig.entry}`  
            **–¶–µ–ª–∏:** `TP1 {sig.take_profit[0]}` ¬∑ `TP2 {sig.take_profit[1]}`  
            **–°—Ç–æ–ø:** `{sig.stop}`  
            **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** `{int(sig.confidence*100)}%`  
            **–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:** `{sig.position_size_pct_nav}% NAV`  
            """
        )
        st.info(sig.narrative_ru)

        st.markdown("**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω**")
        alt = sig.alternatives[0]
        st.markdown(
            f"- {alt.if_condition}: **{alt.action}** –æ—Ç `{alt.entry}` ‚Üí TP1 `{alt.take_profit[0]}`, TP2 `{alt.take_profit[1]}`, —Å—Ç–æ–ø `{alt.stop}`"
        )

        st.caption(f"–°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: {sig.created_at.strftime('%Y-%m-%d %H:%M UTC')} ¬∑ –ò—Å—Ç–µ–∫–∞–µ—Ç: {sig.expires_at.strftime('%Y-%m-%d %H:%M UTC')}")
        st.caption(sig.disclaimer)

    with col2:
        st.markdown("#### JSON")
        st.code(json.dumps(sig.as_dict(), default=str, ensure_ascii=False, indent=2), language="json")

        st.markdown("#### ¬´–ò–≥—Ä—É—à–µ—á–Ω—ã–π¬ª –±—ç–∫—Ç–µ—Å—Ç")
        if sig.action in ["BUY", "SHORT"]:
            res = toy_backtest(sig)
            st.metric("–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PnL (–ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π)", f"{res['pnl']*100:.2f}%")
            st.metric("–í—ã—Ö–æ–¥ –ø–æ —Ü–µ–Ω–µ", f"{res['exit_price']:.4f}")
            st.metric("–®–∞–≥–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞", res["steps"])
        else:
            st.caption("–î–ª—è WAIT/CLOSE —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç: –±—ç–∫—Ç–µ—Å—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")

    st.divider()
    st.caption("–≠—Ç–æ—Ç MVP –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–ª–∏ —Ñ–∏—á–∏. –§–æ—Ä–º–∞—Ç –∏ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å—Ç–æ–ø—ã/—Ü–µ–ª–∏).")

else:
    st.markdown("> –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏ **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª**.")
